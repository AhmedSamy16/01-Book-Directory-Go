// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: books.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books(id, title, author)
VALUES ($1, $2, $3)
RETURNING id, title, author
`

type CreateBookParams struct {
	ID     uuid.UUID
	Title  string
	Author string
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook, arg.ID, arg.Title, arg.Author)
	var i Book
	err := row.Scan(&i.ID, &i.Title, &i.Author)
	return i, err
}

const deleteBookById = `-- name: DeleteBookById :one
DELETE FROM books WHERE id = $1
RETURNING id, title, author
`

func (q *Queries) DeleteBookById(ctx context.Context, id uuid.UUID) (Book, error) {
	row := q.db.QueryRowContext(ctx, deleteBookById, id)
	var i Book
	err := row.Scan(&i.ID, &i.Title, &i.Author)
	return i, err
}

const getAllBooks = `-- name: GetAllBooks :many
SELECT id, title, author FROM books
`

func (q *Queries) GetAllBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getAllBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(&i.ID, &i.Title, &i.Author); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookById = `-- name: GetBookById :one
SELECT id, title, author FROM books WHERE id = $1
`

func (q *Queries) GetBookById(ctx context.Context, id uuid.UUID) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBookById, id)
	var i Book
	err := row.Scan(&i.ID, &i.Title, &i.Author)
	return i, err
}

const updateBookById = `-- name: UpdateBookById :one
UPDATE books SET title = $1, author = $2 WHERE id = $3
RETURNING id, title, author
`

type UpdateBookByIdParams struct {
	Title  string
	Author string
	ID     uuid.UUID
}

func (q *Queries) UpdateBookById(ctx context.Context, arg UpdateBookByIdParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, updateBookById, arg.Title, arg.Author, arg.ID)
	var i Book
	err := row.Scan(&i.ID, &i.Title, &i.Author)
	return i, err
}
